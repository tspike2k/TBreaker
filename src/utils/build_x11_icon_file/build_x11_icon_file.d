nothrow @nogc:

import core.stdc.stdio;
import core.stdc.time;
import logging;
import strings;


extern(C) ubyte *stbi_load(const(char)* filename, int *x, int *y, int *channels_in_file, int desired_channels);
extern(C) void stbi_image_free(void *retval_from_stbi_load);
extern(C) const(char) *stbi_failure_reason();

void main(string[] args)
{
    char[] genTime;
    {
        char[256] buffer;
        time_t currentTime = time(null);
        tm*  localTime = localtime(&currentTime);
        strftime(buffer.ptr, buffer.length, "%I:%M %p (%m/%d/%Y)", localTime);
        genTime = buffer[0 .. length(buffer.ptr)];
    }

    if(args.length < 2)
    {
        logFatal!"Must supply at least one .png filename to {0}. Aborting.\n"(args[0]);
        return;
    }
    
    
    const char* destFilename = "linux_x11_icon.d";
    auto f = fopen(destFilename, "w");
    if (f)
    {
        fprintf(f, "// Generated by build_x11_icon_file at %s\n", genTime.ptr);
        fprintf(f, "//\n");
        fprintf(f, "// NOTE(tspike): See here for some of the scant resources on setting an X11 app icon:\n");
        fprintf(f, "// https://stackoverflow.com/questions/43237104/picture-format-for-net-wm-icon\n");
        fprintf(f, "// https://marc.info/?l=kwin&m=115435217715650&w=2\n");
        fprintf(f, "//\n");
        fprintf(f, "// NOTE(tspike): Pixel format is ARGB.\n\n");
        
        fprintf(f, "immutable long[] x11IconData =\n[");
        
        for (int fileIndex = 1; fileIndex < args.length; ++fileIndex)
        {
            int w, h;
            ubyte* pixels = stbi_load(args[fileIndex].ptr, &w, &h, null, 4);
            if (pixels)
            {
                fprintf(f, "\n    %d, %d, //NOTE(tspike): Must specify width and height before pixel data", w, h);
                int lastRow = -1;
                for (int i = 0; i < w * h * 4; i += 4)
                {
                    ubyte* p = &pixels[i];
                    int currentRow = i / (w * 4);
                    if (lastRow != currentRow)
                    {
                        fprintf(f, "\n    ");
                        lastRow = currentRow;
                    }
                    
                    fprintf(f, "0x%.2x%.2x%.2x%.2x, ", p[3], p[0], p[1], p[2]);
                }
            }
            else
            {
                printf("Err opening file %s: %s. Skipping.\n", args[fileIndex].ptr, stbi_failure_reason());
            }
        }
        
        fprintf(f, "\n];\n");
        fclose(f);
    }
    else
    {
        logFatal!"Err: Unable to create file {0}. Aborting.\n"(destFilename);
    }
    
    return;
}